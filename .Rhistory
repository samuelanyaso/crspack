install.packages("glue")
?library
.libPaths()
Sys.info()["sysname"]
setwd("~/Desktop/UFresearch/ICSTests/testForSubICS")
rm(list = ls())
if(Sys.info()["sysname"] == "Darwin"){
PATH <- "/Users/anyasosamuelcs/Desktop/UFresearch/ICSTests"
libloc <- "/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library"
} else if(Sys.info()["sysname"] == "windows"){
PATH <- "C:/Users/anyas/UFresearch/ICSTests"
libloc <- "C:/Users/anyas/Rpackages"
} else if(Sys.info()["sysname"] == "Linux"){
PATH <- "/home/sanyasosamuel/ICSTests/testForSubICS"
libloc <- "/home/sanyasosamuel/R_libs"
}
options(digits=4)
inSLURM <- (Sys.getenv("SLURM_JOB_ID") != "") # true only if a SLURM job
# subpath <- ifelse(inSLURM, "/home/sanyasosamuel", "C:/Users/anyas/UFresearch")
# PATH <- paste(subpath,"/ICSTests/testForSubICS", sep="")
# libloc <- ifelse(inSLURM, "/home/sanyasosamuel/R_libs",
#                  "C:/Users/anyas/Rpackages")
setwd(PATH)
library(doParallel, lib.loc = libloc)
library(spatstat, lib.loc = libloc)
library(foreach, lib.loc = libloc)
library(tidyverse, lib.loc = libloc)
## load the functions
source("DataGenerators2c.R")
dir()
rm(list = ls())
if(Sys.info()["sysname"] == "Darwin"){
PATH <- "/Users/anyasosamuelcs/Desktop/UFresearch/ICSTests/testForSubICS"
libloc <- "/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library"
} else if(Sys.info()["sysname"] == "windows"){
PATH <- "C:/Users/anyas/UFresearch/ICSTests/testForSubICS"
libloc <- "C:/Users/anyas/Rpackages"
} else if(Sys.info()["sysname"] == "Linux"){
PATH <- "/home/sanyasosamuel/ICSTests/testForSubICS"
libloc <- "/home/sanyasosamuel/R_libs"
}
options(digits=4)
inSLURM <- (Sys.getenv("SLURM_JOB_ID") != "") # true only if a SLURM job
# subpath <- ifelse(inSLURM, "/home/sanyasosamuel", "C:/Users/anyas/UFresearch")
# PATH <- paste(subpath,"/ICSTests/testForSubICS", sep="")
# libloc <- ifelse(inSLURM, "/home/sanyasosamuel/R_libs",
#                  "C:/Users/anyas/Rpackages")
setwd(PATH)
library(doParallel, lib.loc = libloc)
library(spatstat, lib.loc = libloc)
library(foreach, lib.loc = libloc)
library(tidyverse, lib.loc = libloc)
## load the functions
source("DataGenerators2c.R")
source("Bootstrap3.R")
simulator1<-function(M, eta, phi2, tau2, theta1, theta2, Mi,
sigma2, B)
{
simdata<-as.data.frame(simscenario2(M=M, eta=eta, phi2=phi2, tau2=tau2, theta1=theta1, theta2=theta2,
Mi=Mi, sigma2=sigma2))
# L2U.size<-as.data.frame(table(simdata$Level3U,simdata$Level2U))
# colnames(L2U.size)<-c("Level3U","Level2U","Nij")
# simdata<-merge(simdata,L2U.size)[,c("ID","Level3U","Y","Level2U","Ni","Nij")]
z = unique(simdata$Y) # The values at which we want to evaluate the empirical CDF
cdf1<-ewcdf(simdata$Y, weights = 1/(simdata$Nij), normalise=TRUE)
cdf2<-ewcdf(simdata$Y, weights = 1/simdata$Ni, normalise=TRUE)
cdf3<-ecdf(simdata$Y)
p1 = cdf1(z) # H(z)
p2 = cdf2(z) # G(z)
p3 = cdf3(z) # F(z)
T31<-max(abs(p3-p1)) # T1
T23<-max(abs(p2-p3)) # T2
Tstar<-matrix(nrow=B,ncol=2)
for (b in 1:B)
{
# Null distribution (no ISCS) #
bsdata.iscs<-draw.bssample3b(simdata)
# subcluster<-as.data.frame(table(bsdata.iscs[,2],bsdata.iscs[,4]))
# colnames(subcluster)<-c("Level3U","Level2U","Nij")
# bsdata.iscs<-merge(bsdata.iscs,subcluster)[,c("ID","Level3U","Y","Level2U","Ni","Nij")]
bs1.cdf1<-ewcdf(bsdata.iscs$Y, weights = 1/bsdata.iscs$Nij, normalise=TRUE)
bs1.cdf2<-ewcdf(bsdata.iscs$Y, weights = 1/bsdata.iscs$Ni, normalise=TRUE)
bs1.cdf3<-ecdf(bsdata.iscs$Y)
# Null distribution (no ICS) #
bsdata.ics<-draw.bssample3a(simdata)
subcluster<-as.data.frame(table(bsdata.ics[, "Level3U"],bsdata.ics[, "Level2U"]))
colnames(subcluster) <- c("Level3U","Level2U","Nij")
bsdata.ics<-merge(bsdata.ics,subcluster)[,c("ID","Level3U","Y","Level2U","Ni","Nij")]
bs2.cdf3<-ecdf(bsdata.ics$Y)
bs2.cdf2<-ewcdf(bsdata.ics$Y, weights = 1/bsdata.ics$Ni, normalise=TRUE)
p3.ics   = bs2.cdf3(z)
p2.ics   = bs2.cdf2(z)
p1.iscs  = bs1.cdf1(z)
p2.iscs  = bs1.cdf2(z)
p3.iscs  = bs1.cdf3(z)
Tstar[b,1]<-max(abs(p3.iscs-p1.iscs))
Tstar[b,2]<-max(abs(p2.ics-p3.ics))
}
res <- c(mean(T31<=Tstar[,1]), mean(T23<=Tstar[,2]))
names(res) <- c("T1","T2")
return(res)
}
simulator2<-function(M, eta, phi2, tau2, theta1, theta2, Mi, sigma2,
B=500, MC=500, alpha1=0.04, alpha2=0.01)
{
r <- foreach(mc = 1:MC, .combine = "rbind", .packages=c("spatstat","tidyverse","dplyr"),
.errorhandling = "remove",
.export = c("simscenario2", "draw.bssample3a", "draw.bssample3b", "simulator1")) %dopar% {
simulator1(M=M, eta=eta, phi2=phi2, tau2=tau2, theta1=theta1, theta2=theta2, Mi=Mi,
sigma2=sigma2, B=B)
}
res <- as.data.frame(r); rownames(res) <- NULL
res$level1 <- res[, "T1"] < alpha1
res$level2 <- ifelse(!res$level1,res[, "T2"] < alpha2, 0) # see Figure 1 of the manuscript
res$overalllevel <- rowSums(res[, c("level1", "level2")])
level <- colMeans(res[, c("level1", "level2", "overalllevel")])
level[2]<-mean(res[which(res[, "level1"]==FALSE),][, "level2"])
list(r,level)
}
## Simulation design parameters
MM <- c(20, 50, 100); # number of level 1 units
MMi <- c(2, 5); # number of level 2 units
# MM <- c(5); MMi <- c(2,3)
eta <- 5;
phi2 <- 0.25; tau2 <- 0.25;
sigma2 <- 1
B <- 1000; MC <- 1000;
alpha1 <- 0.04; alpha2 <- 0.01
des_pars2 <- matrix(c(c(0), c(0)), ncol=2, byrow=F)
colnames(des_pars2) <- c("theta1", "theta2")
des_pars2 <- as.data.frame(des_pars2)
# set up the parallelization
if(inSLURM){
cores <- Sys.getenv("SLURM_JOB_CPUS_PER_NODE")
cores <- as.numeric(cores)
} else {
cores <- detectCores() - 1
}
PATH
rm(list = ls())
if(Sys.info()["sysname"] == "Darwin"){
PATH <- "/Users/anyasosamuelcs/Desktop/UFresearch/ICSTests/testForSubICS"
libloc <- "/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library"
} else if(Sys.info()["sysname"] == "windows"){
PATH <- "C:/Users/anyas/UFresearch/ICSTests/testForSubICS"
libloc <- "C:/Users/anyas/Rpackages"
} else if(Sys.info()["sysname"] == "Linux"){
PATH <- "/home/sanyasosamuel/ICSTests/testForSubICS"
libloc <- "/home/sanyasosamuel/R_libs"
}
options(digits=4)
inSLURM <- (Sys.getenv("SLURM_JOB_ID") != "") # true only if a SLURM job
# subpath <- ifelse(inSLURM, "/home/sanyasosamuel", "C:/Users/anyas/UFresearch")
# PATH <- paste(subpath,"/ICSTests/testForSubICS", sep="")
# libloc <- ifelse(inSLURM, "/home/sanyasosamuel/R_libs",
#                  "C:/Users/anyas/Rpackages")
setwd(PATH)
library(doParallel, lib.loc = libloc)
library(spatstat, lib.loc = libloc)
library(foreach, lib.loc = libloc)
library(tidyverse, lib.loc = libloc)
## load the functions
source("DataGenerators2c.R")
source("Bootstrap3.R")
simulator1<-function(M, eta, phi2, tau2, theta1, theta2, Mi,
sigma2, B)
{
simdata<-as.data.frame(simscenario2(M=M, eta=eta, phi2=phi2, tau2=tau2, theta1=theta1, theta2=theta2,
Mi=Mi, sigma2=sigma2))
# L2U.size<-as.data.frame(table(simdata$Level3U,simdata$Level2U))
# colnames(L2U.size)<-c("Level3U","Level2U","Nij")
# simdata<-merge(simdata,L2U.size)[,c("ID","Level3U","Y","Level2U","Ni","Nij")]
z = unique(simdata$Y) # The values at which we want to evaluate the empirical CDF
cdf1<-ewcdf(simdata$Y, weights = 1/(simdata$Nij), normalise=TRUE)
cdf2<-ewcdf(simdata$Y, weights = 1/simdata$Ni, normalise=TRUE)
cdf3<-ecdf(simdata$Y)
p1 = cdf1(z) # H(z)
p2 = cdf2(z) # G(z)
p3 = cdf3(z) # F(z)
T31<-max(abs(p3-p1)) # T1
T23<-max(abs(p2-p3)) # T2
Tstar<-matrix(nrow=B,ncol=2)
for (b in 1:B)
{
# Null distribution (no ISCS) #
bsdata.iscs<-draw.bssample3b(simdata)
# subcluster<-as.data.frame(table(bsdata.iscs[,2],bsdata.iscs[,4]))
# colnames(subcluster)<-c("Level3U","Level2U","Nij")
# bsdata.iscs<-merge(bsdata.iscs,subcluster)[,c("ID","Level3U","Y","Level2U","Ni","Nij")]
bs1.cdf1<-ewcdf(bsdata.iscs$Y, weights = 1/bsdata.iscs$Nij, normalise=TRUE)
bs1.cdf2<-ewcdf(bsdata.iscs$Y, weights = 1/bsdata.iscs$Ni, normalise=TRUE)
bs1.cdf3<-ecdf(bsdata.iscs$Y)
# Null distribution (no ICS) #
bsdata.ics<-draw.bssample3a(simdata)
subcluster<-as.data.frame(table(bsdata.ics[, "Level3U"],bsdata.ics[, "Level2U"]))
colnames(subcluster) <- c("Level3U","Level2U","Nij")
bsdata.ics<-merge(bsdata.ics,subcluster)[,c("ID","Level3U","Y","Level2U","Ni","Nij")]
bs2.cdf3<-ecdf(bsdata.ics$Y)
bs2.cdf2<-ewcdf(bsdata.ics$Y, weights = 1/bsdata.ics$Ni, normalise=TRUE)
p3.ics   = bs2.cdf3(z)
p2.ics   = bs2.cdf2(z)
p1.iscs  = bs1.cdf1(z)
p2.iscs  = bs1.cdf2(z)
p3.iscs  = bs1.cdf3(z)
Tstar[b,1]<-max(abs(p3.iscs-p1.iscs))
Tstar[b,2]<-max(abs(p2.ics-p3.ics))
}
res <- c(mean(T31<=Tstar[,1]), mean(T23<=Tstar[,2]))
names(res) <- c("T1","T2")
return(res)
}
simulator2<-function(M, eta, phi2, tau2, theta1, theta2, Mi, sigma2,
B=500, MC=500, alpha1=0.04, alpha2=0.01)
{
r <- foreach(mc = 1:MC, .combine = "rbind", .packages=c("spatstat","tidyverse","dplyr"),
.errorhandling = "remove",
.export = c("simscenario2", "draw.bssample3a", "draw.bssample3b", "simulator1")) %dopar% {
simulator1(M=M, eta=eta, phi2=phi2, tau2=tau2, theta1=theta1, theta2=theta2, Mi=Mi,
sigma2=sigma2, B=B)
}
res <- as.data.frame(r); rownames(res) <- NULL
res$level1 <- res[, "T1"] < alpha1
res$level2 <- ifelse(!res$level1,res[, "T2"] < alpha2, 0) # see Figure 1 of the manuscript
res$overalllevel <- rowSums(res[, c("level1", "level2")])
level <- colMeans(res[, c("level1", "level2", "overalllevel")])
level[2]<-mean(res[which(res[, "level1"]==FALSE),][, "level2"])
list(r,level)
}
MM <- c(5); MMi <- c(2,3)
eta <- 5;
phi2 <- 0.25; tau2 <- 0.25;
sigma2 <- 1
B <- 2; MC <- 3;
alpha1 <- 0.04; alpha2 <- 0.01
# des_pars2 <- matrix(c(c(0), c(0)), ncol=2, byrow=F)
des_pars2 <- matrix(c(0.25,0.25,
0.0,1.0,
1.0,0.0,
2.0,0.25,
0.25,2.0),byrow = T, ncol=2)
colnames(des_pars2) <- c("theta1", "theta2")
des_pars2 <- as.data.frame(des_pars2)
# set up the parallelization
if(inSLURM){
cores <- Sys.getenv("SLURM_JOB_CPUS_PER_NODE")
cores <- as.numeric(cores)
} else {
cores <- detectCores() - 1
}
cl <- makeCluster(cores)
registerDoParallel(cl)
## ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ##
for(mmi in 1:length(MMi)){
Mi <- MMi[mmi]
# creates txt file to store the results
fileConn <- paste(PATH,"/results1/simC2pow_results_Mi_",Mi,"_phi2_",phi2,"_tau2_",tau2,"_B_",B,".txt", sep="")
cat("M theta1 theta2 phi2 tau2 level1 level2 overalllevel",
file=fileConn, sep="\n")
for(mi in 1:length(MM)){
M <- MM[mi]
for(di in 1:nrow(des_pars2)){
theta1 <- des_pars2$theta1[di]
theta2 <- des_pars2$theta2[di]
result <- simulator2(M=M, theta1=theta1, theta2=theta2, Mi=Mi, phi2=phi2, tau2=tau2, eta=eta,
sigma2=sigma2, B=B, MC=MC, alpha1=alpha1, alpha2=alpha2)
# stores the result in the created .txt file
tmp <- c(M=M, theta1=theta1, theta2=theta2, phi2=phi2, tau2=tau2, round(result[[2]], 4))
cat(paste(as.character(tmp), collapse = " "),
file=fileConn, sep="\n", append=TRUE)
# saves result from all MC iteration
saveRDS(result,
paste(PATH,"/results1/simC2pow_m_",M,"_Mi_",Mi,"_theta1_",theta1,"_theta2_",theta2,"_phi2_",phi2,"_tau2_",tau2,"_B_",B,".RDS", sep=""))
}
}
}
Mi
M
di
theta1 <- des_pars2$theta1[di]
theta2 <- des_pars2$theta2[di]
result <- simulator2(M=M, theta1=theta1, theta2=theta2, Mi=Mi, phi2=phi2, tau2=tau2, eta=eta,
sigma2=sigma2, B=B, MC=MC, alpha1=alpha1, alpha2=alpha2)
result
setwd("/Volumes/anyasosamuelcs/NCIresearch")
oo=NULL
oo
rm(list = ls())
inSLURM <- (Sys.getenv("SLURM_JOB_ID") != "") # true only if a SLURM job
if(Sys.info()["sysname"] == "Darwin" & !inSLURM){
PATH <- "/Users/anyasosamuelcs/Desktop/UFresearch/ICSTests/testForSubICS"
libloc <- "/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library"
} else if(Sys.info()["sysname"] == "windows" & !inSLURM){
PATH <- "C:/Users/anyas/UFresearch/ICSTests/testForSubICS"
libloc <- "C:/Users/anyas/Rpackages"
} else if(Sys.info()["sysname"] == "Linux" & inSLURM){
PATH <- "/home/anyasosamuelcs"
libloc <- "/home/anyasosamuelcs/R_libs"
}
getwd()
rm(list = ls())
inSLURM <- (Sys.getenv("SLURM_JOB_ID") != "") # true only if a SLURM job
if(Sys.info()["sysname"] == "Darwin" & !inSLURM){
PATH <- "/Volumes/anyasosamuelcs/NCIresearch"
libloc <- NULL
} else if(Sys.info()["sysname"] == "windows" & !inSLURM){
PATH <- "C:/Users/anyas/UFresearch"
libloc <- "C:/Users/anyas/Rpackages"
} else if(Sys.info()["sysname"] == "Linux" & inSLURM){
PATH <- "/home/anyasosamuelcs/NCIresearch"
libloc <- "/home/anyasosamuelcs/R_libs"
}
options(digits=4)
setwd(PATH)
library(doParallel)
library(foreach)
library(tidyverse)
library(spatstat, lib.loc = libloc)
# set up the parallelization
if(inSLURM){
cores <- Sys.getenv("SLURM_JOB_CPUS_PER_NODE")
cores <- as.numeric(cores)
} else {
cores <- detectCores() - 1
}
cl <- makeCluster(cores)
registerDoParallel(cl)
mean(rnorm(10e5,5,2))
mean(rnorm(10e7,5,2))
#################################################################################
## Author: Samuel Anyaso-Samuel
## Sample R script to test parallel computation and slurm script submission
#################################################################################
rm(list = ls())
inSLURM <- (Sys.getenv("SLURM_JOB_ID") != "") # true only if a SLURM job
## set up file paths
if(Sys.info()["sysname"] == "Darwin" & !inSLURM){
## Work computer (with Biowulf mounted dir)
PATH <- "/Volumes/anyasosamuelcs/NCIresearch"
libloc <- NULL
} else if(Sys.info()["sysname"] == "windows" & !inSLURM){
## Home/Personal computer
PATH <- "C:/Users/anyas/UFresearch"
libloc <- "C:/Users/anyas/Rpackages"
} else if(Sys.info()["sysname"] == "Linux" & inSLURM){
## NIH Biowulf
PATH <- "/home/anyasosamuelcs/NCIresearch"
libloc <- "/home/anyasosamuelcs/R_libs"
}
options(digits=4)
setwd(PATH)
# /spin1/home/linux/anyasosamuelcs/R_libs
library(doParallel)
library(foreach)
library(tidyverse)
library(spatstat, lib.loc = libloc)
# set up the parallelization
if(inSLURM){
cores <- Sys.getenv("SLURM_JOB_CPUS_PER_NODE")
cores <- as.numeric(cores)
} else {
cores <- detectCores() - 1
}
cl <- makeCluster(cores)
registerDoParallel(cl)
## simple computation
res <- foreach(mc = 1:500, .combine = "c", .packages=c("spatstat","tidyverse","dplyr"),
.errorhandling = "remove") %dopar% {
mean(rnorm(10e7,5,2))
}
mean(rnorm(10e4,5,2))
## simple computation
res <- foreach(mc = 1:100, .combine = "c", .packages=c("spatstat","tidyverse","dplyr"),
.errorhandling = "remove") %dopar% {
mean(rnorm(10e4,5,2))
}
print(res) # print the result
install.packages("parallelly")
parallelly::availableCores()
setwd("/Volumes/data/project1_data/Oral.Microbiome.GWAS.4.Sam")
rm(list = ls())
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github(repo="samuelanyaso/crspack")
sessionInfo()
library(devtools)
devtools::install_github(repo="samuelanyaso/crspack")
rm(list = ls())
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(Rdpack)
## set up file paths
if(Sys.info()["sysname"] == "Darwin"){
## Work computer (with Biowulf mounted dir)
WD1 <- "/Users/anyasosamuelcs/Desktop/UFresearch/dev/crspack_files"
WD2 <- "/Users/anyasosamuelcs/Desktop/UFresearch/dev/crspack"
} else if(Sys.info()["sysname"] == "windows"){
## Home/Personal computer
WD1 <- "C:/Users/anyas/UFresearch/dev/crspack_files"
WD2 <- "C:/Users/anyas/UFresearch/dev/crspack"
}
setwd(WD2)
dir()
formatR::tidy_dir("R")      # makes the code neat
# then run next lines of code
Rcpp::compileAttributes()
devtools::load_all()
## step - Generate R documentation
devtools::document()
## step - Checks the package
setwd(WD2)
devtools::check() ## default argument is pkg = ".", current working directory
## step  - Builds the package
# This step will generate a .tar.gz package (a zip file)
setwd(WD2)
## step  - Builds the package
# This step will generate a .tar.gz package (a zip file)
setwd(WD2)
devtools::build() ## default argument is pkg = ".", current working directory
## step - Install the package
## To install package, set wd in the home directory of the
## Built package
setwd(WD2)
devtools::install() ## default argument is pkg = ".", current working directory
sample
detach("package:crspack", unload = TRUE)
remove.packages("crspack")
